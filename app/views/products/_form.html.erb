<%= form_for(product) do |f| %> 
  <% if product.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(product.errors.count, "error") %> prohibited this product from being saved:</h2>

      <ul>
      <% product.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :name %>
    <%= f.text_field :name, id: :product_name %>
  </div>

  <div class="field">
    <%= f.label :brand_id %>
    <%= f.select :brand_id, Brand.all.map{|b| [b.name, b.id]}%>
  </div>

  <div class="field">
    <%= f.label :about %>
    <%= f.text_field :about %>
  </div>
  <div class="field">
    <%= f.label :address %>
    <%= f.text_field :address, id: "autocomplete", placeholder: "Enter your address", onFocus: "geolocate()" %>
    
  </div>

   <div class="form-group">
    <%= f.fields_for :images do |image| %>
      <%= render :partial => "image_fields", :locals => { :f => image } %>
    <% end %>
    <%= link_to_add_association "Upload New Image", f, :images, class: "btn btn-primary" %>
  </div>

  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>
 <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDQ46BfH57TltvW_pqOACKtTbyWF7z3i4s&libraries=places&callback=initAutocomplete"
        async defer></script>

<script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
   